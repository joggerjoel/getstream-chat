{"ast":null,"code":"import { getData, getSanitizedData, intersect } from '..';\nimport { uncompress } from '../data';\nimport store from '../store';\nexport default class NimbleEmojiIndex {\n  constructor(data, set) {\n    if (data.compressed) {\n      uncompress(data);\n    }\n\n    this.data = data || {};\n    this.set = set || null;\n    this.originalPool = {};\n    this.index = {};\n    this.emojis = {};\n    this.emoticons = {};\n    this.customEmojisList = [];\n    this.buildIndex();\n  }\n\n  buildIndex() {\n    for (let emoji in this.data.emojis) {\n      let emojiData = this.data.emojis[emoji],\n          {\n        short_names,\n        emoticons,\n        skin_variations\n      } = emojiData,\n          id = short_names[0];\n\n      if (emoticons) {\n        emoticons.forEach(emoticon => {\n          if (this.emoticons[emoticon]) {\n            return;\n          }\n\n          this.emoticons[emoticon] = id;\n        });\n      } // If skin variations include them\n\n\n      if (skin_variations) {\n        this.emojis[id] = {};\n\n        for (let skinTone = 1; skinTone <= 6; skinTone++) {\n          this.emojis[id][skinTone] = getSanitizedData({\n            id,\n            skin: skinTone\n          }, skinTone, this.set, this.data);\n        }\n      } else {\n        this.emojis[id] = getSanitizedData(id, null, this.set, this.data);\n      }\n\n      this.originalPool[id] = emojiData;\n    }\n  }\n\n  clearCustomEmojis(pool) {\n    this.customEmojisList.forEach(emoji => {\n      let emojiId = emoji.id || emoji.short_names[0];\n      delete pool[emojiId];\n      delete this.emojis[emojiId];\n    });\n  }\n\n  addCustomToPool(custom, pool) {\n    if (this.customEmojisList.length) this.clearCustomEmojis(pool);\n    custom.forEach(emoji => {\n      let emojiId = emoji.id || emoji.short_names[0];\n\n      if (emojiId && !pool[emojiId]) {\n        pool[emojiId] = getData(emoji, null, null, this.data);\n        this.emojis[emojiId] = getSanitizedData(emoji, null, null, this.data);\n      }\n    });\n    this.customEmojisList = custom;\n    this.index = {};\n  }\n\n  search(value, {\n    emojisToShowFilter,\n    maxResults,\n    include,\n    exclude,\n    custom = []\n  } = {}) {\n    if (this.customEmojisList != custom) this.addCustomToPool(custom, this.originalPool);\n    const skinTone = store.get('skin') || 1;\n    maxResults || (maxResults = 75);\n    include || (include = []);\n    exclude || (exclude = []);\n    var results = null,\n        pool = this.originalPool;\n\n    if (value.length) {\n      if (value == '-' || value == '-1') {\n        return [this.emojis['-1'][skinTone]];\n      }\n\n      var values = value.toLowerCase().split(/[\\s|,|\\-|_]+/),\n          allResults = [];\n\n      if (values.length > 2) {\n        values = [values[0], values[1]];\n      }\n\n      if (include.length || exclude.length) {\n        pool = {};\n        this.data.categories.forEach(category => {\n          let isIncluded = include && include.length ? include.indexOf(category.id) > -1 : true;\n          let isExcluded = exclude && exclude.length ? exclude.indexOf(category.id) > -1 : false;\n\n          if (!isIncluded || isExcluded) {\n            return;\n          }\n\n          category.emojis.forEach(emojiId => pool[emojiId] = this.data.emojis[emojiId]);\n        });\n\n        if (custom.length) {\n          let customIsIncluded = include && include.length ? include.indexOf('custom') > -1 : true;\n          let customIsExcluded = exclude && exclude.length ? exclude.indexOf('custom') > -1 : false;\n\n          if (customIsIncluded && !customIsExcluded) {\n            this.addCustomToPool(custom, pool);\n          }\n        }\n      }\n\n      allResults = values.map(value => {\n        var aPool = pool,\n            aIndex = this.index,\n            length = 0;\n\n        for (let charIndex = 0; charIndex < value.length; charIndex++) {\n          const char = value[charIndex];\n          length++;\n          aIndex[char] || (aIndex[char] = {});\n          aIndex = aIndex[char];\n\n          if (!aIndex.results) {\n            let scores = {};\n            aIndex.results = [];\n            aIndex.pool = {};\n\n            for (let id in aPool) {\n              let emoji = aPool[id],\n                  {\n                search\n              } = emoji,\n                  sub = value.substr(0, length),\n                  subIndex = search.indexOf(sub);\n\n              if (subIndex != -1) {\n                let score = subIndex + 1;\n                if (sub == id) score = 0;\n\n                if (this.emojis[id] && this.emojis[id][skinTone]) {\n                  aIndex.results.push(this.emojis[id][skinTone]);\n                } else {\n                  aIndex.results.push(this.emojis[id]);\n                }\n\n                aIndex.pool[id] = emoji;\n                scores[id] = score;\n              }\n            }\n\n            aIndex.results.sort((a, b) => {\n              var aScore = scores[a.id],\n                  bScore = scores[b.id];\n\n              if (aScore == bScore) {\n                return a.id.localeCompare(b.id);\n              } else {\n                return aScore - bScore;\n              }\n            });\n          }\n\n          aPool = aIndex.pool;\n        }\n\n        return aIndex.results;\n      }).filter(a => a);\n\n      if (allResults.length > 1) {\n        results = intersect.apply(null, allResults);\n      } else if (allResults.length) {\n        results = allResults[0];\n      } else {\n        results = [];\n      }\n    }\n\n    if (results) {\n      if (emojisToShowFilter) {\n        results = results.filter(result => emojisToShowFilter(pool[result.id]));\n      }\n\n      if (results && results.length > maxResults) {\n        results = results.slice(0, maxResults);\n      }\n    }\n\n    return results;\n  }\n\n}","map":{"version":3,"sources":["/Users/jlabelle/Documents/Projects/benzinga/website-react-examples/chat-exmple/node_modules/emoji-mart/dist-modern/utils/emoji-index/nimble-emoji-index.js"],"names":["getData","getSanitizedData","intersect","uncompress","store","NimbleEmojiIndex","constructor","data","set","compressed","originalPool","index","emojis","emoticons","customEmojisList","buildIndex","emoji","emojiData","short_names","skin_variations","id","forEach","emoticon","skinTone","skin","clearCustomEmojis","pool","emojiId","addCustomToPool","custom","length","search","value","emojisToShowFilter","maxResults","include","exclude","get","results","values","toLowerCase","split","allResults","categories","category","isIncluded","indexOf","isExcluded","customIsIncluded","customIsExcluded","map","aPool","aIndex","charIndex","char","scores","sub","substr","subIndex","score","push","sort","a","b","aScore","bScore","localeCompare","filter","apply","result","slice"],"mappings":"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","sourcesContent":["import { getData, getSanitizedData, intersect } from '..';\nimport { uncompress } from '../data';\nimport store from '../store';\nexport default class NimbleEmojiIndex {\n  constructor(data, set) {\n    if (data.compressed) {\n      uncompress(data);\n    }\n\n    this.data = data || {};\n    this.set = set || null;\n    this.originalPool = {};\n    this.index = {};\n    this.emojis = {};\n    this.emoticons = {};\n    this.customEmojisList = [];\n    this.buildIndex();\n  }\n\n  buildIndex() {\n    for (let emoji in this.data.emojis) {\n      let emojiData = this.data.emojis[emoji],\n          {\n        short_names,\n        emoticons,\n        skin_variations\n      } = emojiData,\n          id = short_names[0];\n\n      if (emoticons) {\n        emoticons.forEach(emoticon => {\n          if (this.emoticons[emoticon]) {\n            return;\n          }\n\n          this.emoticons[emoticon] = id;\n        });\n      } // If skin variations include them\n\n\n      if (skin_variations) {\n        this.emojis[id] = {};\n\n        for (let skinTone = 1; skinTone <= 6; skinTone++) {\n          this.emojis[id][skinTone] = getSanitizedData({\n            id,\n            skin: skinTone\n          }, skinTone, this.set, this.data);\n        }\n      } else {\n        this.emojis[id] = getSanitizedData(id, null, this.set, this.data);\n      }\n\n      this.originalPool[id] = emojiData;\n    }\n  }\n\n  clearCustomEmojis(pool) {\n    this.customEmojisList.forEach(emoji => {\n      let emojiId = emoji.id || emoji.short_names[0];\n      delete pool[emojiId];\n      delete this.emojis[emojiId];\n    });\n  }\n\n  addCustomToPool(custom, pool) {\n    if (this.customEmojisList.length) this.clearCustomEmojis(pool);\n    custom.forEach(emoji => {\n      let emojiId = emoji.id || emoji.short_names[0];\n\n      if (emojiId && !pool[emojiId]) {\n        pool[emojiId] = getData(emoji, null, null, this.data);\n        this.emojis[emojiId] = getSanitizedData(emoji, null, null, this.data);\n      }\n    });\n    this.customEmojisList = custom;\n    this.index = {};\n  }\n\n  search(value, {\n    emojisToShowFilter,\n    maxResults,\n    include,\n    exclude,\n    custom = []\n  } = {}) {\n    if (this.customEmojisList != custom) this.addCustomToPool(custom, this.originalPool);\n    const skinTone = store.get('skin') || 1;\n    maxResults || (maxResults = 75);\n    include || (include = []);\n    exclude || (exclude = []);\n    var results = null,\n        pool = this.originalPool;\n\n    if (value.length) {\n      if (value == '-' || value == '-1') {\n        return [this.emojis['-1'][skinTone]];\n      }\n\n      var values = value.toLowerCase().split(/[\\s|,|\\-|_]+/),\n          allResults = [];\n\n      if (values.length > 2) {\n        values = [values[0], values[1]];\n      }\n\n      if (include.length || exclude.length) {\n        pool = {};\n        this.data.categories.forEach(category => {\n          let isIncluded = include && include.length ? include.indexOf(category.id) > -1 : true;\n          let isExcluded = exclude && exclude.length ? exclude.indexOf(category.id) > -1 : false;\n\n          if (!isIncluded || isExcluded) {\n            return;\n          }\n\n          category.emojis.forEach(emojiId => pool[emojiId] = this.data.emojis[emojiId]);\n        });\n\n        if (custom.length) {\n          let customIsIncluded = include && include.length ? include.indexOf('custom') > -1 : true;\n          let customIsExcluded = exclude && exclude.length ? exclude.indexOf('custom') > -1 : false;\n\n          if (customIsIncluded && !customIsExcluded) {\n            this.addCustomToPool(custom, pool);\n          }\n        }\n      }\n\n      allResults = values.map(value => {\n        var aPool = pool,\n            aIndex = this.index,\n            length = 0;\n\n        for (let charIndex = 0; charIndex < value.length; charIndex++) {\n          const char = value[charIndex];\n          length++;\n          aIndex[char] || (aIndex[char] = {});\n          aIndex = aIndex[char];\n\n          if (!aIndex.results) {\n            let scores = {};\n            aIndex.results = [];\n            aIndex.pool = {};\n\n            for (let id in aPool) {\n              let emoji = aPool[id],\n                  {\n                search\n              } = emoji,\n                  sub = value.substr(0, length),\n                  subIndex = search.indexOf(sub);\n\n              if (subIndex != -1) {\n                let score = subIndex + 1;\n                if (sub == id) score = 0;\n\n                if (this.emojis[id] && this.emojis[id][skinTone]) {\n                  aIndex.results.push(this.emojis[id][skinTone]);\n                } else {\n                  aIndex.results.push(this.emojis[id]);\n                }\n\n                aIndex.pool[id] = emoji;\n                scores[id] = score;\n              }\n            }\n\n            aIndex.results.sort((a, b) => {\n              var aScore = scores[a.id],\n                  bScore = scores[b.id];\n\n              if (aScore == bScore) {\n                return a.id.localeCompare(b.id);\n              } else {\n                return aScore - bScore;\n              }\n            });\n          }\n\n          aPool = aIndex.pool;\n        }\n\n        return aIndex.results;\n      }).filter(a => a);\n\n      if (allResults.length > 1) {\n        results = intersect.apply(null, allResults);\n      } else if (allResults.length) {\n        results = allResults[0];\n      } else {\n        results = [];\n      }\n    }\n\n    if (results) {\n      if (emojisToShowFilter) {\n        results = results.filter(result => emojisToShowFilter(pool[result.id]));\n      }\n\n      if (results && results.length > maxResults) {\n        results = results.slice(0, maxResults);\n      }\n    }\n\n    return results;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}