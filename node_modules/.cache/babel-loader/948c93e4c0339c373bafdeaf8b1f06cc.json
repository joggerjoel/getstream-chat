{"ast":null,"code":"import { buildSearch } from './data';\nimport stringFromCodePoint from '../polyfills/stringFromCodePoint';\nimport { uncompress } from './data';\nconst COLONS_REGEX = /^(?:\\:([^\\:]+)\\:)(?:\\:skin-tone-(\\d)\\:)?$/;\nconst SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];\n\nfunction unifiedToNative(unified) {\n  var unicodes = unified.split('-'),\n      codePoints = unicodes.map(u => `0x${u}`);\n  return stringFromCodePoint.apply(null, codePoints);\n}\n\nfunction sanitize(emoji) {\n  var {\n    name,\n    short_names,\n    skin_tone,\n    skin_variations,\n    emoticons,\n    unified,\n    custom,\n    customCategory,\n    imageUrl\n  } = emoji,\n      id = emoji.id || short_names[0],\n      colons = `:${id}:`;\n\n  if (custom) {\n    return {\n      id,\n      name,\n      short_names,\n      colons,\n      emoticons,\n      custom,\n      customCategory,\n      imageUrl\n    };\n  }\n\n  if (skin_tone) {\n    colons += `:skin-tone-${skin_tone}:`;\n  }\n\n  return {\n    id,\n    name,\n    short_names,\n    colons,\n    emoticons,\n    unified: unified.toLowerCase(),\n    skin: skin_tone || (skin_variations ? 1 : null),\n    native: unifiedToNative(unified)\n  };\n}\n\nfunction getSanitizedData() {\n  return sanitize(getData(...arguments));\n}\n\nfunction getData(emoji, skin, set, data) {\n  var emojiData = {};\n\n  if (typeof emoji == 'string') {\n    let matches = emoji.match(COLONS_REGEX);\n\n    if (matches) {\n      emoji = matches[1];\n\n      if (matches[2]) {\n        skin = parseInt(matches[2], 10);\n      }\n    }\n\n    if (data.aliases.hasOwnProperty(emoji)) {\n      emoji = data.aliases[emoji];\n    }\n\n    if (data.emojis.hasOwnProperty(emoji)) {\n      emojiData = data.emojis[emoji];\n    } else {\n      return null;\n    }\n  } else if (emoji.id) {\n    if (data.aliases.hasOwnProperty(emoji.id)) {\n      emoji.id = data.aliases[emoji.id];\n    }\n\n    if (data.emojis.hasOwnProperty(emoji.id)) {\n      emojiData = data.emojis[emoji.id];\n      skin || (skin = emoji.skin);\n    }\n  }\n\n  if (!Object.keys(emojiData).length) {\n    emojiData = emoji;\n    emojiData.custom = true;\n\n    if (!emojiData.search) {\n      emojiData.search = buildSearch(emoji);\n    }\n  }\n\n  emojiData.emoticons || (emojiData.emoticons = []);\n  emojiData.variations || (emojiData.variations = []);\n\n  if (emojiData.skin_variations && skin > 1) {\n    emojiData = JSON.parse(JSON.stringify(emojiData));\n    var skinKey = SKINS[skin - 1],\n        variationData = emojiData.skin_variations[skinKey];\n\n    if (variationData) {\n      if (!variationData.variations && emojiData.variations) {\n        delete emojiData.variations;\n      }\n\n      if (set && (variationData[`has_img_${set}`] == undefined || variationData[`has_img_${set}`]) || !set) {\n        emojiData.skin_tone = skin;\n\n        for (let k in variationData) {\n          let v = variationData[k];\n          emojiData[k] = v;\n        }\n      }\n    }\n  }\n\n  if (emojiData.variations && emojiData.variations.length) {\n    emojiData = JSON.parse(JSON.stringify(emojiData));\n    emojiData.unified = emojiData.variations.shift();\n  }\n\n  return emojiData;\n}\n\nfunction getEmojiDataFromNative(nativeString, set, data) {\n  if (data.compressed) {\n    uncompress(data);\n  }\n\n  const skinTones = ['🏻', '🏼', '🏽', '🏾', '🏿'];\n  const skinCodes = ['1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];\n  let skin;\n  let skinCode;\n  let baseNativeString = nativeString;\n  skinTones.forEach((skinTone, skinToneIndex) => {\n    if (nativeString.indexOf(skinTone) > 0) {\n      skin = skinToneIndex + 2;\n      skinCode = skinCodes[skinToneIndex];\n    }\n  });\n  let emojiData;\n\n  for (let id in data.emojis) {\n    let emoji = data.emojis[id];\n    let emojiUnified = emoji.unified;\n\n    if (emoji.variations && emoji.variations.length) {\n      emojiUnified = emoji.variations.shift();\n    }\n\n    if (skin && emoji.skin_variations && emoji.skin_variations[skinCode]) {\n      emojiUnified = emoji.skin_variations[skinCode].unified;\n    }\n\n    if (unifiedToNative(emojiUnified) === baseNativeString) emojiData = emoji;\n  }\n\n  if (!emojiData) {\n    return null;\n  }\n\n  emojiData.id = emojiData.short_names[0];\n  return getSanitizedData(emojiData, skin, set, data);\n}\n\nfunction uniq(arr) {\n  return arr.reduce((acc, item) => {\n    if (acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n\n    return acc;\n  }, []);\n}\n\nfunction intersect(a, b) {\n  const uniqA = uniq(a);\n  const uniqB = uniq(b);\n  return uniqA.filter(item => uniqB.indexOf(item) >= 0);\n}\n\nfunction deepMerge(a, b) {\n  var o = {};\n\n  for (let key in a) {\n    let originalValue = a[key],\n        value = originalValue;\n\n    if (b.hasOwnProperty(key)) {\n      value = b[key];\n    }\n\n    if (typeof value === 'object') {\n      value = deepMerge(originalValue, value);\n    }\n\n    o[key] = value;\n  }\n\n  return o;\n} // https://github.com/sonicdoe/measure-scrollbar\n\n\nfunction measureScrollbar() {\n  if (typeof document == 'undefined') return 0;\n  const div = document.createElement('div');\n  div.style.width = '100px';\n  div.style.height = '100px';\n  div.style.overflow = 'scroll';\n  div.style.position = 'absolute';\n  div.style.top = '-9999px';\n  document.body.appendChild(div);\n  const scrollbarWidth = div.offsetWidth - div.clientWidth;\n  document.body.removeChild(div);\n  return scrollbarWidth;\n} // Use requestIdleCallback() if available, else fall back to setTimeout().\n// Throttle so as not to run too frequently.\n\n\nfunction throttleIdleTask(func) {\n  const doIdleTask = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n  let running = false;\n  return function throttled() {\n    if (running) {\n      return;\n    }\n\n    running = true;\n    doIdleTask(() => {\n      running = false;\n      func();\n    });\n  };\n}\n\nexport { getData, getEmojiDataFromNative, getSanitizedData, uniq, intersect, deepMerge, unifiedToNative, measureScrollbar, throttleIdleTask };","map":{"version":3,"sources":["/Users/jlabelle/Documents/Projects/benzinga/website-react-examples/chat-exmple/node_modules/emoji-mart/dist-modern/utils/index.js"],"names":["buildSearch","stringFromCodePoint","uncompress","COLONS_REGEX","SKINS","unifiedToNative","unified","unicodes","split","codePoints","map","u","apply","sanitize","emoji","name","short_names","skin_tone","skin_variations","emoticons","custom","customCategory","imageUrl","id","colons","toLowerCase","skin","native","getSanitizedData","getData","arguments","set","data","emojiData","matches","match","parseInt","aliases","hasOwnProperty","emojis","Object","keys","length","search","variations","JSON","parse","stringify","skinKey","variationData","undefined","k","v","shift","getEmojiDataFromNative","nativeString","compressed","skinTones","skinCodes","skinCode","baseNativeString","forEach","skinTone","skinToneIndex","indexOf","emojiUnified","uniq","arr","reduce","acc","item","push","intersect","a","b","uniqA","uniqB","filter","deepMerge","o","key","originalValue","value","measureScrollbar","document","div","createElement","style","width","height","overflow","position","top","body","appendChild","scrollbarWidth","offsetWidth","clientWidth","removeChild","throttleIdleTask","func","doIdleTask","requestIdleCallback","setTimeout","running","throttled"],"mappings":"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","sourcesContent":["import { buildSearch } from './data';\nimport stringFromCodePoint from '../polyfills/stringFromCodePoint';\nimport { uncompress } from './data';\nconst COLONS_REGEX = /^(?:\\:([^\\:]+)\\:)(?:\\:skin-tone-(\\d)\\:)?$/;\nconst SKINS = ['1F3FA', '1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];\n\nfunction unifiedToNative(unified) {\n  var unicodes = unified.split('-'),\n      codePoints = unicodes.map(u => `0x${u}`);\n  return stringFromCodePoint.apply(null, codePoints);\n}\n\nfunction sanitize(emoji) {\n  var {\n    name,\n    short_names,\n    skin_tone,\n    skin_variations,\n    emoticons,\n    unified,\n    custom,\n    customCategory,\n    imageUrl\n  } = emoji,\n      id = emoji.id || short_names[0],\n      colons = `:${id}:`;\n\n  if (custom) {\n    return {\n      id,\n      name,\n      short_names,\n      colons,\n      emoticons,\n      custom,\n      customCategory,\n      imageUrl\n    };\n  }\n\n  if (skin_tone) {\n    colons += `:skin-tone-${skin_tone}:`;\n  }\n\n  return {\n    id,\n    name,\n    short_names,\n    colons,\n    emoticons,\n    unified: unified.toLowerCase(),\n    skin: skin_tone || (skin_variations ? 1 : null),\n    native: unifiedToNative(unified)\n  };\n}\n\nfunction getSanitizedData() {\n  return sanitize(getData(...arguments));\n}\n\nfunction getData(emoji, skin, set, data) {\n  var emojiData = {};\n\n  if (typeof emoji == 'string') {\n    let matches = emoji.match(COLONS_REGEX);\n\n    if (matches) {\n      emoji = matches[1];\n\n      if (matches[2]) {\n        skin = parseInt(matches[2], 10);\n      }\n    }\n\n    if (data.aliases.hasOwnProperty(emoji)) {\n      emoji = data.aliases[emoji];\n    }\n\n    if (data.emojis.hasOwnProperty(emoji)) {\n      emojiData = data.emojis[emoji];\n    } else {\n      return null;\n    }\n  } else if (emoji.id) {\n    if (data.aliases.hasOwnProperty(emoji.id)) {\n      emoji.id = data.aliases[emoji.id];\n    }\n\n    if (data.emojis.hasOwnProperty(emoji.id)) {\n      emojiData = data.emojis[emoji.id];\n      skin || (skin = emoji.skin);\n    }\n  }\n\n  if (!Object.keys(emojiData).length) {\n    emojiData = emoji;\n    emojiData.custom = true;\n\n    if (!emojiData.search) {\n      emojiData.search = buildSearch(emoji);\n    }\n  }\n\n  emojiData.emoticons || (emojiData.emoticons = []);\n  emojiData.variations || (emojiData.variations = []);\n\n  if (emojiData.skin_variations && skin > 1) {\n    emojiData = JSON.parse(JSON.stringify(emojiData));\n    var skinKey = SKINS[skin - 1],\n        variationData = emojiData.skin_variations[skinKey];\n\n    if (variationData) {\n      if (!variationData.variations && emojiData.variations) {\n        delete emojiData.variations;\n      }\n\n      if (set && (variationData[`has_img_${set}`] == undefined || variationData[`has_img_${set}`]) || !set) {\n        emojiData.skin_tone = skin;\n\n        for (let k in variationData) {\n          let v = variationData[k];\n          emojiData[k] = v;\n        }\n      }\n    }\n  }\n\n  if (emojiData.variations && emojiData.variations.length) {\n    emojiData = JSON.parse(JSON.stringify(emojiData));\n    emojiData.unified = emojiData.variations.shift();\n  }\n\n  return emojiData;\n}\n\nfunction getEmojiDataFromNative(nativeString, set, data) {\n  if (data.compressed) {\n    uncompress(data);\n  }\n\n  const skinTones = ['🏻', '🏼', '🏽', '🏾', '🏿'];\n  const skinCodes = ['1F3FB', '1F3FC', '1F3FD', '1F3FE', '1F3FF'];\n  let skin;\n  let skinCode;\n  let baseNativeString = nativeString;\n  skinTones.forEach((skinTone, skinToneIndex) => {\n    if (nativeString.indexOf(skinTone) > 0) {\n      skin = skinToneIndex + 2;\n      skinCode = skinCodes[skinToneIndex];\n    }\n  });\n  let emojiData;\n\n  for (let id in data.emojis) {\n    let emoji = data.emojis[id];\n    let emojiUnified = emoji.unified;\n\n    if (emoji.variations && emoji.variations.length) {\n      emojiUnified = emoji.variations.shift();\n    }\n\n    if (skin && emoji.skin_variations && emoji.skin_variations[skinCode]) {\n      emojiUnified = emoji.skin_variations[skinCode].unified;\n    }\n\n    if (unifiedToNative(emojiUnified) === baseNativeString) emojiData = emoji;\n  }\n\n  if (!emojiData) {\n    return null;\n  }\n\n  emojiData.id = emojiData.short_names[0];\n  return getSanitizedData(emojiData, skin, set, data);\n}\n\nfunction uniq(arr) {\n  return arr.reduce((acc, item) => {\n    if (acc.indexOf(item) === -1) {\n      acc.push(item);\n    }\n\n    return acc;\n  }, []);\n}\n\nfunction intersect(a, b) {\n  const uniqA = uniq(a);\n  const uniqB = uniq(b);\n  return uniqA.filter(item => uniqB.indexOf(item) >= 0);\n}\n\nfunction deepMerge(a, b) {\n  var o = {};\n\n  for (let key in a) {\n    let originalValue = a[key],\n        value = originalValue;\n\n    if (b.hasOwnProperty(key)) {\n      value = b[key];\n    }\n\n    if (typeof value === 'object') {\n      value = deepMerge(originalValue, value);\n    }\n\n    o[key] = value;\n  }\n\n  return o;\n} // https://github.com/sonicdoe/measure-scrollbar\n\n\nfunction measureScrollbar() {\n  if (typeof document == 'undefined') return 0;\n  const div = document.createElement('div');\n  div.style.width = '100px';\n  div.style.height = '100px';\n  div.style.overflow = 'scroll';\n  div.style.position = 'absolute';\n  div.style.top = '-9999px';\n  document.body.appendChild(div);\n  const scrollbarWidth = div.offsetWidth - div.clientWidth;\n  document.body.removeChild(div);\n  return scrollbarWidth;\n} // Use requestIdleCallback() if available, else fall back to setTimeout().\n// Throttle so as not to run too frequently.\n\n\nfunction throttleIdleTask(func) {\n  const doIdleTask = typeof requestIdleCallback === 'function' ? requestIdleCallback : setTimeout;\n  let running = false;\n  return function throttled() {\n    if (running) {\n      return;\n    }\n\n    running = true;\n    doIdleTask(() => {\n      running = false;\n      func();\n    });\n  };\n}\n\nexport { getData, getEmojiDataFromNative, getSanitizedData, uniq, intersect, deepMerge, unifiedToNative, measureScrollbar, throttleIdleTask };"]},"metadata":{},"sourceType":"module"}